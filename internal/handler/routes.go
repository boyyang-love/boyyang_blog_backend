// Code generated by goctl. DO NOT EDIT.
package handler

import (
	"net/http"

	"blog_server/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/login",
				Handler: loginHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/register",
				Handler: registerHandler(serverCtx),
			},
		},
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/upload",
				Handler: uploadHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/cos/upload",
				Handler: cosUploadHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/exhibition/create",
				Handler: createExhibitionHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/exhibition/info",
				Handler: exhibitionInfoHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/exhibition/update",
				Handler: updateExhibitionHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/exhibition/approval",
				Handler: approvalExhibitionHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/users/info",
				Handler: userinfoHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/users/update",
				Handler: updateUserinfoHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/blog/create",
				Handler: createBlogHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/blog/update",
				Handler: updateBlogHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/blog/delete",
				Handler: deleteBlogHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/blog/info",
				Handler: bloginfoHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/blog/thumbsup",
				Handler: thumbsupBlogHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/blog/comment/create",
				Handler: createCommentHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/blog/comment/delete",
				Handler: deleteCommentHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/blog/comment/thumbsup",
				Handler: thumbsupCommentHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/like",
				Handler: likeHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/likes/info",
				Handler: likesInfoHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/follow",
				Handler: followHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/follow/info",
				Handler: followInfoHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/dashboard",
				Handler: dashboardHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)
}
